syntax = "proto3";

package decode.iot.datastore;
option go_package = "datastore";

import "google/protobuf/timestamp.proto";

// Datastore is the interface we propose exposing to implement an encrypted
// datastore for the IOT scale model and pilot for DECODE. We expose three
// methods, to write and read data, as well as a method to delete data for a
// user.
service Datastore {
  // WriteData is our function call that writes a single encrypted data event to
  // the underlying storage substrate. It takes a WriteRequest containing the
  // actual data to be stored along with public key of the bucket for which data
  // should be persisted and the submitting user's DECODE user id. THese
  // additional attributes allow us to request the data from the bucket by
  // public key, and delete the data by user uid.
  rpc WriteData (WriteRequest) returns (WriteResponse);

  // ReadData is used to request data from the data store. Data is requested
  // keyed by the public key used to encrypt it (encoded as a Base64 or hex
  // string probably). In addition a read request allows the client to specify a
  // time interval so that data is only retrieved if it was recorded within the
  // interval. Pagination is supported to allow for large intervals to be
  // requested without having to return all the data in one hit.
  rpc ReadData (ReadRequest) returns (ReadResponse);

  // DeleteData allows a client to delete data from a bucket for an individual
  // user. The incoming delete request uses both the public key which identifies
  // the bucket, but also requires a user uid. The result of this call is that
  // all data for this user will have been removed from the datastore, but other
  // data will be unaffected.
  rpc DeleteData (DeleteRequest) returns (DeleteResponse);
}

// WriteRequest is the message that is sent to the store in order to write
// data. Data is written keyed by the public key of the recipient, the id of
// the user, as well as an id representing the entitlement policy. Finally the
// encrypted data is sent as a chunk of bytes.
message WriteRequest {
  // The public key is the key identifying the party for which data has been
  // encrypted.
  string public_key = 1; // required

  // The user uid is a unique identifier for the user submitting the data. We
  // persist this in order to allow the user to delete stored data.
  string user_uid = 2; // required

  // The data field here is the encrypted data to be stored for the specified
  // public key/entitlement policy. From the datastore's perspective this can
  // just be a slice of bytes, however zenroom does permit this data to maintain
  // some structure.
  bytes data = 3; // required
}

// WriteResponse is a placeholder message returned from the call to write data
// to the store. Currently no fields have been identified, but keeping this as
// a separate type allows us to add fields as we identify them.
message WriteResponse {
}

// ReadRequest is the message that is sent to the store in order to read data
// for a specific bucket. When requesting data a client must submit the public
// key and entitlement policy id which identify the bucket, then optional start
// and end timestamps. If the time attributes are included then the end time
// must be after the start time; if no end time is specified then the default is
// "now". It is an error to specify an end time without a start time.
message ReadRequest {
  // The public key is the key identifying the party for which data has been
  // encrypted. This field is required.
  string public_key = 1;

  // The start time represents the start of an interval for which we wish to read
  // data. This field is optional, but if nil end_time must also be nil. It is
  // an error for start_time to be after end_time.
  google.protobuf.Timestamp start_time = 2;

  // The end time represents the end of an interval for which we wish to read
  // data. It may be nil, in which case it defaults to "now".
  google.protobuf.Timestamp end_time = 3;

  // The page cursor is an opaque string that an implementing server can
  // understand in order to efficiently paginate through events.  The value
  // sent here cannot be calculated by the client, rather they should just
  // inspect value returned from a previous call to to `ReadData` and if this a
  // non-empty string, then this value can be sent back to the server to get
  // the "next" page of results.
  // This field is optional.
  string page_cursor = 4;

  // The maximum number of encrypted events to return in the response. The
  // default value is 500.
  uint32 page_size = 5;
}

// EncryptedEvent is a message representing a single instance of encrypted data
// that is stored by the datastore. When reading data we return lists of this
// type, which comprise a timestamp and a chunk of encoded data. From the
// datastore's perspective the encrypted data can be viewed as just an opaque
// chunk of bytes, however our encoding engine (Zenroom), does allow us to just
// encrypt the values within a JSON structure, but for the datastore's purposes
// we don't care about this.
message EncryptedEvent {
  // The time at which the event was recorded by the datastore.
  google.protobuf.Timestamp event_time = 1;

  // The opaque chunk of bytes comprising the encoded data from the device.
  bytes data = 2;

  // An identifier for an individual event. Used internally when sorting and
  // paginating.
  int64 event_id = 3;
}

// ReadResponse is the top level message returned by the read operations to the
// datastore. It contains the public key for the recipient, as well as the
// entitlement policy id. The events property contains a list of encrypted
// events in ascending time order. This will not necessarily be all possible
// events for the requested time period, as we have implemented pagination for
// this endpoint. If the response contains a non-empty string for the
// next_page_cursor property, then there are more pages of data to be consumed;
// if this property is the empty string, then the response is all data available
// for the requested time period.
message ReadResponse {
  // The public key of the recipient for which data is being requested. This
  // field will always have a non-empty value.
  string public_key = 1;

  // The list of encrypted events containing the actual data being requested.
  // This list will be returned in ascending time order, and each element
  // contains a timestamp as well as the actual chunk of encrypted data. If no
  // data is available this will be an empty list.
  repeated EncryptedEvent events = 2;

  // An optional field containing a pointer to the next page of results
  // expressed as an opaque string. Clients should not expect to be able to
  // parse this string as its contents are strictly implementation specific and
  // subject to change at any time. Rather the value here should just be checked
  // to see if it is an empty string or contains a value, and if any value is
  // present, the client can pass it back in a new read request as the value of
  // the page_cursor field.
  string next_page_cursor = 3;

  // The page size that was originally requested to create this response.
  // Supplied to make it easy for the client to construct a new request for the
  // next page.
  uint32 page_size = 4;
}

// DeleteRequest is a message that is sent to the server in order to delete
// entries stored for a particular user. It may be in the future we extend this
// to allow data for a specific entitlement policy to be deleted but for now the
// only use case we know we have to support is being able to delete an
// individual user's data.
message DeleteRequest {
  // The public key is the key identifying the policy for which data has been
  // encrypted. This field is required.
  string public_key = 1;

  // The id of the user who wishes to have their data removed from the
  // datastore.
  string user_uid = 2;
}

// DeleteResponse is a placeholder message we return from the delete call.
// Future implementations may add fields to this type.
message DeleteResponse {
}
