syntax = "proto3";

package devicereg;
option go_package = "devicereg";

// DeviceRegistration is our service that provides the top level interface which
// starts the process of claiming a device and ultimately create entitlements.
// This service will eventually be the service that orchestrates the flow
// between the DECODE wallet, and SmartCitizen's onboarding process and provide
// the mechanism for managing entitlements via the wallet. For now we simply
// expose two methods which allow a simulated device to be claimed and revoked.
service DeviceRegistration {
  // ClaimDevice here is what starts the flow off of registering and configuring
  // a device. It takes as input a message containing a device token
  // (identifying the device), a user uid (which is the decode user id), as well
  // as the devices real world location and some other metadata about the
  // device. The outcome of this call in the first iteration of the system, is
  // that we would call down to the stream encoder to create an encrypted stream
  // for the device that will be accessible from the datastore.
  rpc ClaimDevice (ClaimDeviceRequest) returns (ClaimDeviceResponse);

  // RevokeDevice here should delete all config for the device stored within
  // the device registration service, which must also delete all streams by
  // calling down to the stream encoder.
  rpc RevokeDevice (RevokeDeviceRequest) returns (RevokeDeviceResponse);

  // CreateEntitlementPolicy is a method exposed by the service which allows a
  // new entitlement policy to be created and stored within the device
  // registration service. Once a policy has been created, users will then be
  // able to apply this policy to their devices via the wallet.
  rpc CreateEntitlementPolicy (CreateEntitlementPolicyRequest) returns (CreateEntitlementPolicyResponse);

  // DeleteEntitlementPolicy is a method exposed by the service which allows an
  // authorized client to request that an entitlement policy be deleted.
  // Deleting a policy will not affect any existing devices that have already
  // used the policy in order to create one or more streams within the encoder,
  // however it will prevent any new applications of that policy to other
  // devices.
  rpc DeleteEntitlementPolicy (DeleteEntitlementPolicyRequest) returns (DeleteEntitlementPolicyResponse);

  // ListEntitlementPolicies is a method exposed by the service which returns a
  // list of all policies currently defined and available within the service to
  // be applied to devices. Currently it just returns a list of all known
  // policies with no capability to filter or paginate these policies.
  rpc ListEntitlementPolicies (ListEntitlementPoliciesRequest) returns (ListEntitlementPoliciesResponse);

  // ApplyEntitlement is a method exposed by the service which allows a user who
  // has previously claimed a device to apply specific entitlement policies to
  // their device. Applying a policy to a device sets up a new stream on the
  // stream encoder with the filtering or aggregation functions defined in the
  // policy applied to incoming events. This will result in the stream encoder
  // encrypting and emitting the processed events to the datastore for the
  // specified policy. Note we send the same request message for both this and
  // RevokeEntitlement as the data sent is exactly the same.
  rpc ApplyEntitlement (EntitlementRequest) returns (ApplyEntitlementResponse);

  // RevokeEntitlement is a method exposed by the service which allows a user
  // who has previously claimed a device to revoke specific entitlement policies
  // from their device. Revoking a policy from a device causes the service to
  // delete associated streams meaning data will no longer be encrypted and sent
  // to the datastore. Note we send the same request message for both this and
  // ApplyEntitlement as the data sent is exactly the same.
  rpc RevokeEntitlement (EntitlementRequest) returns (RevokeEntitlementResponse);
}

// ClaimDeviceRequest is the message we send in order to initially claim that a
// specific user owns a device. This message contains the device token (which
// identifies the device), the individual's DECODE user id as well as some
// metadata about the device. Currently this is just the lat/long location of
// the device, and an enumarated value describing whether the claimed device is
// situated indoors or outdoors.
// As a result of this message the device registration service creates a key
// pair for the device as well as a key pair for the user.
message ClaimDeviceRequest {
  // The unique identifier for the device. Note this isn't a hardware identifier
  // as the same physical device may go to multiple recipients, rather it
  // represents the logical ID of the device as currently claimed. This comes
  // from SmartCitizen's onboarding process ultimately. This is a required field
  string device_token = 1;

  // A unique identifier for the user which should come from the DECODE wallet
  // ultimately. This is a required field.
  string user_uid = 2;

  // A nested type capturing the location of the device expressed via decimal
  // long/lat pair.
  message Location {
    // The longitude expressed as a decimal. This is a required field.
    double longitude = 1;

    // The latitude expressed as a decimal. This is a required field.
    double latitude = 2;
  }

  // The location of the device to be claimed. This is a required field.
  Location location = 3;

  // An enumeration which allows us to express whether the device will be
  // located indoors or outdoors when deployed.
  enum Exposure {
    INDOOR = 0;
    OUTDOOR = 1;
  }

  // The specific exposure of the device, i.e. is this instance indoors or
  // outdoors. If not specified the default value is INDOOR.
  Exposure exposure = 4;

  // The address of the MQTT broker to which the specified device is configured
  // to publish data. This is a required field.
  string broker_address = 5;
}

// ClaimDeviceResponse is the message returned after successfully claiming a
// device. We return here a key pair for the user, as well as the key pair for
// the device. The private key is used within the stream encoder in order to
// encrypt data for the device for specified recipients, but we also require the
// client to present the private key in order to apply new entitlements to the
// device.
message ClaimDeviceResponse {
  // The private part of a key pair for the individual user.
  string user_private_key = 1;

  // The public part of a key pair representing the individual user.
  string user_public_key = 2;

  // The public part of a key pair applied to the device.
  string device_public_key = 3;
}

// RevokeDeviceRequest is a message sent to the registration service by which a
// user can revoke a previous claim on a device. This should result in all
// configuration for the device being deleted from registration services store,
// as well removing any stream encoding configurations.
message RevokeDeviceRequest {
  // The unique token identifying the device.
  string device_token = 1;

  // The user's private key, serving here just to prove that the user actually is
  // the entity that previously claimed the device.
  string user_private_key = 2;
}

// RevokeDeviceResponse is a placeholder response returned from a revoke
// request. Currently empty, but reserved for any fields identified for future
// iterations.
message RevokeDeviceResponse {
}

// Entitlement is a message used to describe an operation that may be applied to
// a specific data type published by a SmartCitizen device. The message contains
// two required fields: the sensor_id (this is the type of data we are entitling
// over), and a specified operation to be performed on that sensor type. This
// can be one of three actions: to share the sensor without modification, to
// apply a binning algorithm to the data so we output a bucketed value, or a
// moving average calculated dynamically for incoming values.
//
// If an titlement specifies an Action type of `BIN`, then the optional
// `buckets` parameter is required, similarly if an action type of `MOVING_AVG`
// is specified, then `interval` is a required field.
message Entitlement {
  // The unique id of the sensor type for which this specific entitlement is
  // defined. This is a required field.
  uint32 sensor_id = 1;

  // An enumeration which allows us to specify what type of sharing is to be
  // defined for the specified sensor type. The default value is `SHARE` which
  // implies sharing the data at full resolution. If this type is specified, it
  // is an error if either of `buckets` or `interval` is also supplied.
  enum Action {
    SHARE = 0;
    BIN = 1;
    MOVING_AVG = 2;
  }

  // The specific action this entitlement defines for the sensor type. This is a
  // required field.
  Action action = 2;

  // The bins attribute is used to specify the the bins into which incoming
  // values should be classified. Each element in the list is the upper
  // inclusive bound of a bin. The values submitted must be sorted in strictly
  // increasing order. There is no need to add a highest bin with +Inf bound, it
  // will be added implicitly. This field is optional unless an Action of `BIN`
  // has been requested, in which case it is required. It is an error to send
  // values for this attribute unless the value of Action is `BIN`.
  repeated double bins = 3;

  // This attribute is used to control the entitlement in the case for which we
  // have specified an action type representing a moving average. It represents
  // the interval in seconds over which the moving average should be calculated,
  // e.g. for a 15 minute moving average the value supplied here would be 900.
  // This field is optional unless an Action of `MOVING_AVG` has been specified,
  // in which case it is required. It is an error to send a value for this
  // attribute unless the value of Action is `MOVING_AVG`.
  uint32 interval = 4;
}

// CreateEntitlementPolicyRequest is a message sent to the device registration
// service to create a new entitlement policy. An entitlement policy is a
// collection of one or more "Entitlements". A single Entitlement specifies an
// operation to be performed on a single data channel being published by a
// SmartCitizen device. The policy as a whole is comprised of one or more
// Entitlements.
message CreateEntitlementPolicyRequest {
  // The list of entitlements we wish to create for the policy.
  repeated Entitlement entitlements = 1;
}

// CreateEntitlementPolicyResponse is a message returned by the service after a
// policy has been created. On creating a policy the device registration service
// also creates a key pair for the policy. The public part of this key pair will
// be used by the encoder in order to encrypt data for the specified recipient.
// In order to decrypt data at the other end, the private key must be
// distributed to the recipient, and they will then be able to use this key to
// decrypt the data. It is out of scope for this service to address how this key
// is distributed to the correct recipient. The returned message below contains
// a unique identifier of the policy allocated by the service, as well as the
// newly created key pair.
message CreateEntitlementPolicyResponse {
  // This attribute contains a unique identifier for the policy that can be used
  // for later requests to either apply a policy to a specific device, or to
  // delete the policy and so prevent new instances being applied to devices.
  string policy_id = 1;

  // This attribute contains the private part of a key pair created by the
  // registration service for the new policy.
  string private_key = 2;

  // This attribute contains the public part of a key pair created by the
  // registration service for the new policy.
  string public_key = 3;
}

// DeleteEntitlementPolicyRequest is a message that can be sent to the
// registration service in order to delete an existing policy.
//
// Deleting a policy does not affect any already existing streams configured for
// the policy, it just stops any new instances of this policy being applied to
// other devices.
message DeleteEntitlementPolicyRequest {
  // This attribute contains the unique policy identifier returned when creating
  // the policy.
  string policy_id = 1;

  // This attribute contains the private key previously created for the policy.
  // This should be a secret only known to the creator, so prevents unauthorized
  // clients from deleting other client's policies.
  string private_key = 2;
}

// DeleteEntitlementPolicyResponse is a placeholder response returned from a
// delete request. Currently empty, but reserved for any fields identified for
// future iterations.
message DeleteEntitlementPolicyResponse{
}

// ListEntitlementPoliciesRequest is the message sent to the service in order to
// receive a list of currently defined entitlement policies. Currently this
// message is empty as we simply return a list of all known policies, but this
// message may be extended should a need be identified to paginate through
// policies, or apply any search or filtering techniques.
message ListEntitlementPoliciesRequest {
}

// ListEntitlementPoliciesResponse is the response to the method call to list
// policies. It simply returns a list of all currently registered and
// non-deleted policies. This is intended to be able to be fed to the DECODE
// wallet in order to allow participant to choose which entitlements to apply to
// their devices.
message ListEntitlementPoliciesResponse {
  // Policy is a nested type used to be able to cleanly return a list of
  // Policies within a single response. Each Policy instance contains the id of
  // the policy, the list of entitlements defined by the policy, as well as the
  // policy's public key.
  message Policy {
    // This attribute contains the unique identifier of the policy.
    string policy_id = 1;

    // This field contains a list of the entitlements that define the policy.
    repeated Entitlement entitlements = 2;

    // This attribute contains the public key of the policy. This public key
    // attribute is the label applied to the bucket within the datastore which
    // will be how data can be downloaded for the entitlement policy.
    string public_key = 3;
  }

  // This attribute contains the list of policies currently available on the
  // device registration service.
  repeated Policy policies = 1;
}

// EntitlementRequest is a message type we define which allows a user with a
// claimed device to apply or revoke one or more entitlement policies to a
// device. The attributes defined within the request are the device_token which
// should be stored within the user's wallet, the private key associated with
// the device which only the claiming user should know (again should be in the
// wallet), and a list of entitlement policy ids. On receiving this message the
// service must validate the device attributes to ensure the user has rights to
// create the streams, and then for each specified policy id we should check it
// still represents a valid policy. If both of these attributes are valid, the
// device registration service must then make calls to the stream encoder to
// either create or delete the appropriate streams. If any operation fails, the
// service should return an error but will not have changed any local state.
message EntitlementRequest {
  // This attribute contains the identifying token of the device as defined by
  // SmartCitizen. This is a required field.
  string device_token = 1;

  // This attribute contains the private key for the user previously generated
  // by the device registration service. If this does not match with the user
  // who has claimed the device, then this request will be viewed as invalid.
  // This is a required field.
  string user_private_key = 2;

  // This attribute contains a list of one or more policy ids which the caller
  // is requesting by applied to their device. This list must have 1 or more
  // elements. If any of the ids specified in this list are not valid the service
  // will return an error and not create any of the specified streams.
  repeated string policy_id = 3;
}

// ApplyEntitlementResponse is a placeholder message type returned from a call
// where we apply entitlements to a device. Currently it has no attributes but
// is kept as a separate type to allow for future extensions.
message ApplyEntitlementResponse {
}

// RevokeEntitlementResponse is a placeholder message type returned from a call
// where we revoke entitlements from a device. Currently it has no attributes
// but is kept as a separate type to allow for future extensions.
message RevokeEntitlementResponse {
}