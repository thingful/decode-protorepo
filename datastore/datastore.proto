syntax = "proto3";

package decode.iot.datastore;
option go_package = "datastore";

import "google/protobuf/timestamp.proto";

// Datastore is the interface we propose exposing to implement an encrypted
// datastore for the IOT scale model and pilot for DECODE. We expose two API
// methods, one to write and one to read data.
service Datastore {
  // WriteData is our function call that writes a single encrypted data event to
  // the underlying storage substrate. It takes a WriteRequest containing the
  // actual data to be stored along with public key of the bucket for which data
  // should be persisted and the submitting user's DECODE user id. THese
  // additional attributes allow us to request the data from the bucket by
  // public key.
  rpc WriteData (WriteRequest) returns (WriteResponse);

  // ReadData is used to request data from the data store. Data is requested
  // keyed by the public key used to encrypt it (encoded as a Base64 or hex
  // string probably). In addition a read request allows the client to specify a
  // time interval so that data is only retrieved if it was recorded within the
  // interval. Pagination is supported to allow for large intervals to be
  // requested without having to return all the data in one hit.
  rpc ReadData (ReadRequest) returns (ReadResponse);
}

// WriteRequest is the message that is sent to the store in order to write
// data. Data is written keyed by the public key of the recipient, the id of
// the user, as well as an id representing the entitlement policy. Finally the
// encrypted data is sent as a chunk of bytes.
message WriteRequest {
  // Reserve these attributes as they have been removed from a previous version
  // of this specification.
  reserved 1, 4;
  reserved "public_key", "policy_id";

  // A string that uniquely identifies the community for which data is being
  // written. A recipient will not be able to decrypt the data unless they are
  // in possession of valid credentials to decrypt this data. This is a
  // required field.
  string community_id = 5;

  // The data field here is the encrypted data to be stored for the specified
  // public key/entitlement policy. From the datastore's perspective this can
  // just be a slice of bytes, however zenroom does permit this data to
  // maintain some structure. From the datastores perspective however it treats
  // this data as a completely opaque bytes.
  bytes data = 2; // required

  // A token that uniquely identifies the device. This is a required field.
  string device_token = 3;
}

// WriteResponse is a placeholder message returned from the call to write data
// to the store. Currently no fields have been identified, but keeping this as
// a separate type allows us to add fields as we identify them.
message WriteResponse {
}

// ReadRequest is the message that is sent to the store in order to read data
// for a specific bucket. When requesting data a client must submit the public
// key and entitlement policy id which identify the bucket, then optional start
// and end timestamps. If the time attributes are included then the end time
// must be after the start time; if no end time is specified then the default is
// "now". It is an error to specify an end time without a start time.
message ReadRequest {
  // Reserve these attributes as they have been removed from a previous version
  // of this specification.
  reserved 1, 6;
  reserved "public_key", "policy_id";

  // The start time represents the start of an interval for which we wish to
  // read data. It is an error for start_time to be in the future or to be
  // after end_time. This field is required.
  google.protobuf.Timestamp start_time = 2; // required

  // The end time represents the end of an interval for which we wish to read
  // data. It may be nil, in which case it defaults to "now".
  google.protobuf.Timestamp end_time = 3;

  // The page cursor is an opaque string that an implementing server can
  // understand in order to efficiently paginate through events.  The value
  // sent here cannot be calculated by the client, rather they should just
  // inspect value returned from a previous call to to `ReadData` and if this a
  // non-empty string, then this value can be sent back to the server to get
  // the "next" page of results.  This field is optional.
  string page_cursor = 4;

  // The maximum number of encrypted events to return in the response. The
  // default value is 500. Returns an error if the caller requests a larger
  // page size than the maximum.
  uint32 page_size = 5;

  // A string that uniquely identifies the community for which data is being
  // requested. A recipient will not be able to decrypt the data unless they
  // are in possession of the correct credentials. This is a required field.
  string community_id = 7;
}

// EncryptedEvent is a message representing a single instance of encrypted data
// that is stored by the datastore. When reading data we return lists of this
// type, which comprise a timestamp and a chunk of encoded data. From the
// datastore's perspective the encrypted data can be viewed as just an opaque
// chunk of bytes, however our encoding engine (Zenroom), does allow us to just
// encrypt the values within a JSON structure, but for the datastore's purposes
// we don't care about this.
message EncryptedEvent {
  // The time at which the event was recorded by the datastore.
  google.protobuf.Timestamp event_time = 1;

  // The opaque chunk of bytes comprising the encoded data from the device.
  bytes data = 2;
}

// ReadResponse is the top level message returned by the read operations to the
// datastore. It contains the public key for the recipient, as well as the
// entitlement policy id. The events property contains a list of encrypted
// events in ascending time order. This will not necessarily be all possible
// events for the requested time period, as we have implemented pagination for
// this endpoint. If the response contains a non-empty string for the
// next_page_cursor property, then there are more pages of data to be consumed;
// if this property is the empty string, then the response is all data available
// for the requested time period.
message ReadResponse {
  // Reserve these attributes as they have been removed from a previous version
  // of this specification.
  reserved 1, 5;
  reserved "public_key", "policy_id";

  // The list of encrypted events containing the actual data being requested.
  // This list will be returned in ascending time order, and each element
  // contains a timestamp as well as the actual chunk of encrypted data. If no
  // data is available this will be an empty list.
  repeated EncryptedEvent events = 2;

  // An optional field containing a pointer to the next page of results
  // expressed as an opaque string. Clients should not expect to be able to
  // parse this string as its contents are strictly implementation specific and
  // subject to change at any time. Rather the value here should just be checked
  // to see if it is an empty string or contains a value, and if any value is
  // present, the client can pass it back in a new read request as the value of
  // the page_cursor field.
  string next_page_cursor = 3;

  // The page size that was originally requested to create this response.
  // Supplied to make it easy for the client to construct a new request for the
  // next page.
  uint32 page_size = 4;

  // A string that uniquely identifies the community for which data is being
  // sent. A recipient will not be able to decrypt the data unless they
  // are in possession of the correct credentials.
  string community_id = 6;
}
