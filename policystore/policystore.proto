syntax = "proto3";

package decode.iot.policystore;
option go_package = "policystore";

// PolicyStore is a component that is responsible for maintaining a list of
// currently active data policies that are in use within the DECODE IoT pilot.
// It exposes an API by which clients can create or delete policies from the
// system, and importantly it exposes an API by which the DECODE wallet can
// retrieve a list of active policies which allows the wallet to then present a
// UI to the end user by which they will be able to choose which policies they
// wish to take part in.
service PolicyStore {
  // CreateEntitlementPolicy is a method exposed by the service which allows a
  // new entitlement policy to be created and stored within the device
  // registration service. Once a policy has been created, users will then be
  // able to apply this policy to their devices via the wallet.
  rpc CreateEntitlementPolicy (CreateEntitlementPolicyRequest) returns (CreateEntitlementPolicyResponse);

  // DeleteEntitlementPolicy is a method exposed by the service which allows an
  // authorized client to request that an entitlement policy be deleted.
  // Deleting a policy will not affect any existing devices that have already
  // used the policy in order to create one or more streams within the encoder,
  // however it will prevent any new applications of that policy to other
  // devices.
  rpc DeleteEntitlementPolicy (DeleteEntitlementPolicyRequest) returns (DeleteEntitlementPolicyResponse);

  // ListEntitlementPolicies is a method exposed by the service which returns a
  // list of all policies currently defined and available within the service to
  // be applied to devices. Currently it just returns a list of all known
  // policies with no capability to filter or paginate these policies.
  rpc ListEntitlementPolicies (ListEntitlementPoliciesRequest) returns (ListEntitlementPoliciesResponse);
}


// Operation is a message used to describe an operation that may be applied to
// a specific data type published by a SmartCitizen device. The message contains
// two required fields: the sensor_id (this is the type of data we are entitling
// over), and a specified operation to be performed on that sensor type. This
// can be one of three actions: to share the sensor without modification, to
// apply a binning algorithm to the data so we output a bucketed value, or a
// moving average calculated dynamically for incoming values.
//
// If an operation specifies an Action type of `BIN`, then the optional
// `buckets` parameter is required, similarly if an action type of `MOVING_AVG`
// is specified, then `interval` is a required field.
message Operation {
  // The unique id of the sensor type for which this specific entitlement is
  // defined. This is a required field.
  uint32 sensor_id = 1; // required

  // An enumeration which allows us to specify what type of sharing is to be
  // defined for the specified sensor type. The default value is `SHARE` which
  // implies sharing the data at full resolution. If this type is specified, it
  // is an error if either of `buckets` or `interval` is also supplied.
  enum Action {
    UNKNOWN = 0;
    SHARE = 1;
    BIN = 2;
    MOVING_AVG = 3;
  }

  // The specific action this operation defines for the sensor type. This is a
  // required field.
  Action action = 2; // required

  // The bins attribute is used to specify the the bins into which incoming
  // values should be classified. Each element in the list is the upper
  // inclusive bound of a bin. The values submitted must be sorted in strictly
  // increasing order. There is no need to add a highest bin with +Inf bound, it
  // will be added implicitly. This field is optional unless an Action of `BIN`
  // has been requested, in which case it is required. It is an error to send
  // values for this attribute unless the value of Action is `BIN`.
  repeated double bins = 3;

  // This attribute is used to control the entitlement in the case for which we
  // have specified an action type representing a moving average. It represents
  // the interval in seconds over which the moving average should be calculated,
  // e.g. for a 15 minute moving average the value supplied here would be 900.
  // This field is optional unless an Action of `MOVING_AVG` has been specified,
  // in which case it is required. It is an error to send a value for this
  // attribute unless the value of Action is `MOVING_AVG`.
  uint32 interval = 4;
}

// CreateEntitlementPolicyRequest is a message sent to the policy registration
// service to create a new entitlement policy. An entitlement policy is a
// collection of one or more "Operations". A single Operation specifies an
// functional transformation to be performed on a single data channel being
// published by a SmartCitizen device. The policy as a whole is comprised of
// one or more Operations.
message CreateEntitlementPolicyRequest {
  // reserve these fields to prevent future changes using them.
  reserved 1;
  reserved "public_key";

  // This attribute is used to attach a human friendly label to the policy
  // suitable for presenting to the end user in the DECODE wallet. This is a
  // required field.
  string label = 2; // required

  // The list of operations we wish to create for the policy. This field is
  // required, and it is required that the client supplies at least one
  // Operation.
  repeated Operation operations = 3; // required

  // This attribute contains an identifier of an authorizable attribute required
  // for taking part in the Coconut protocol.
  string authorizable_attribute_id = 4; // required

  // This attribute contains a reference to the credential issuer service the
  // end user must interact with in order to obtain blind credentials when
  // taking part in the Coconut protocol.
  string credential_issuer_endpoint_url = 5; // required

  // Multi language description of the community for which this policy applies
  // consisting of a map where the map keys are a standard language code, and
  // the value is the description in that language.
  map<string, string> descriptions = 6;
}

// CreateEntitlementPolicyResponse is a message returned by the service after a
// policy has been created. The message simply contains an identifier for the
// policy, as well as a token that the caller must protect.
message CreateEntitlementPolicyResponse {
  // reserve the old field name and number
  reserved 1;
  reserved "policy_id";

  // This attribute contains a unique identifier for the community that can be
  // used for later requests to either join a community to a specific device, or
  // to delete the policy and so prevent new instances being applied to devices.
  string community_id = 3;

  // This attribute contains a secret generated by the service that is
  // associated with the policy. This token is required to be presented by a
  // caller when deleting a policy, so must be treated as confidential by the
  // caller.
  string token = 2;
}

// DeleteEntitlementPolicyRequest is a message that can be sent to the
// registration service in order to delete an existing policy.
//
// Deleting a policy does not affect any already existing streams configured for
// the policy, it just stops any new instances of this policy being applied to
// other devices.
message DeleteEntitlementPolicyRequest {
  // reserve the old field name and number
  reserved 1;
  reserved "policy_id";

  // This attribute contains the unique community identifier returned when
  // creating the policy. This is a required field.
  string community_id = 3; // required

  // This attribute contains the token returned to the creator when they
  // created the policy, and must match the value stored within the
  // PolicyStore. This is a required field.
  string token = 2; // required
}

// DeleteEntitlementPolicyResponse is a placeholder response returned from a
// delete request. Currently empty, but reserved for any fields identified for
// future iterations.
message DeleteEntitlementPolicyResponse{
}

// ListEntitlementPoliciesRequest is the message sent to the service in order
// to receive a list of currently defined entitlement policies. Currently this
// message is empty as we simply return a list of all known policies, but this
// message may be extended should a need be identified to paginate through
// policies, or apply any search or filtering techniques.
message ListEntitlementPoliciesRequest {
}

// ListEntitlementPoliciesResponse is the response to the method call to list
// policies. It simply returns a list of all currently registered and
// non-deleted policies. This is intended to be able to be fed to the DECODE
// wallet in order to allow participant to choose which entitlements to apply to
// their devices.
message ListEntitlementPoliciesResponse {
  // Policy is a nested type used to be able to cleanly return a list of
  // Policies within a single response. Each Policy instance contains the id of
  // the policy, the list of entitlements defined by the policy, as well as the
  // policy's public key.
  message Policy {
    // reserve the old field name and number
    reserved 1;
    reserved "policy_id";

    // This attribute contains the unique identifier of the policy.
    string community_id = 7;

    // This attribute contains a human friendly label describing the policy
    // suitable for rendering in the DECODE wallet
    string label = 2;

    // This field contains a list of the operations that define the policy.
    repeated Operation operations = 3;

    // This attribute contains the public key of the policy. This public key
    // attribute is the label applied to the bucket within the datastore which
    // will be how data can be downloaded for the entitlement policy.
    string public_key = 4;

    // This attribute contains an identifier of an authorizable attribute required
    // for taking part in the Coconut protocol.
    string authorizable_attribute_id = 5; // required

    // This attribute contains a reference to the credential issuer service the
    // end user must interact with in order to obtain blind credentials when
    // taking part in the Coconut protocol.
    string credential_issuer_endpoint_url = 6; // required

    // Multi language description of the community for which this policy applies
    // consisting of a map where the map keys are a standard language code, and
    // the value is the description in that language.
    map<string, string> descriptions = 8;
  }

  // This attribute contains the list of all policies currently available on
  // the device registration service.
  repeated Policy policies = 1;
}
